// <auto-generated />
using System;
using ChatbotManagement.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatbotManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230906002314_ThirdMigration")]
    partial class ThirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatbotManagement.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoredFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoredFileId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ChatbotManagement.Models.FileKeyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.Property<int>("StoredFileId")
                        .HasColumnType("int");

                    b.HasKey("KeywordId", "StoredFileId");

                    b.HasIndex("StoredFileId");

                    b.ToTable("FileKeywords");
                });

            modelBuilder.Entity("ChatbotManagement.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("ChatbotManagement.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StoredFileId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoredFileId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ChatbotManagement.Models.StoredFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolrId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StoredFiles");
                });

            modelBuilder.Entity("ChatbotManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatbotManagement.Models.Feedback", b =>
                {
                    b.HasOne("ChatbotManagement.Models.StoredFile", "StoredFile")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StoredFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoredFile");
                });

            modelBuilder.Entity("ChatbotManagement.Models.FileKeyword", b =>
                {
                    b.HasOne("ChatbotManagement.Models.Keyword", "Keyword")
                        .WithMany("FileKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChatbotManagement.Models.StoredFile", "StoredFile")
                        .WithMany("FileKeywords")
                        .HasForeignKey("StoredFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("StoredFile");
                });

            modelBuilder.Entity("ChatbotManagement.Models.Message", b =>
                {
                    b.HasOne("ChatbotManagement.Models.StoredFile", "StoredFile")
                        .WithMany("Messages")
                        .HasForeignKey("StoredFileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StoredFile");
                });

            modelBuilder.Entity("ChatbotManagement.Models.Keyword", b =>
                {
                    b.Navigation("FileKeywords");
                });

            modelBuilder.Entity("ChatbotManagement.Models.StoredFile", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("FileKeywords");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
